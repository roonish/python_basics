class MyList:
    def __init__(self, initial):
        if isinstance(initial, MyList):
            self._list = initial._list[:]
        else:
            self._list = list(initial)
    
    def __repr__(self):
        return repr(self._list)
    
    def __str__(self):
        return str(self._list)
    
    def __len__(self):
        return len(self._list)
    
    def __getitem__(self, index):
        result = self._list[index]
        if isinstance(index, slice):
            return MyList(result)
        else:
            return result
    
    def __setitem__(self, index, value):
        self._list[index] = value
    
    def __delitem__(self, index):
        del self._list[index]
    
    def __iter__(self):
        return iter(self._list)
    
    def __contains__(self, item):
        return item in self._list
    
    def __add__(self, other):
        if isinstance(other, MyList):
            return MyList(self._list + other._list)
        else:
            return MyList(self._list + other)
    
    def __radd__(self, other):
        if isinstance(other, list):
            return MyList(other + self._list)
        return NotImplemented
    
    def __iadd__(self, other):
        if isinstance(other, MyList):
            self._list += other._list
        else:
            self._list += other
        return self
    
    def __mul__(self, n):
        return MyList(self._list * n)
    
    def __rmul__(self, n):
        return MyList(self._list * n)
    
    def __eq__(self, other):
        if isinstance(other, MyList):
            return self._list == other._list
        return self._list == other
    
    def __ne__(self, other):
        return not self.__eq__(other)
    
    def __lt__(self, other):
        return self._list < other._list if isinstance(other, MyList) else self._list < other
    
    def __le__(self, other):
        return self._list <= other._list if isinstance(other, MyList) else self._list <= other
    
    def __gt__(self, other):
        return self._list > other._list if isinstance(other, MyList) else self._list > other
    
    def __ge__(self, other):
        return self._list >= other._list if isinstance(other, MyList) else self._list >= other
    
    def append(self, item):
        self._list.append(item)
    
    def extend(self, other):
        if isinstance(other, MyList):
            self._list.extend(other._list)
        else:
            self._list.extend(other)
    
    def insert(self, index, item):
        self._list.insert(index, item)
    
    def remove(self, item):
        self._list.remove(item)
    
    def pop(self, index=-1):
        return self._list.pop(index)
    
    def clear(self):
        self._list.clear()
    
    def index(self, item, start=0, end=None):
        return self._list.index(item, start, end)
    
    def count(self, item):
        return self._list.count(item)
    
    def sort(self, *, key=None, reverse=False):
        self._list.sort(key=key, reverse=reverse)
    
    def reverse(self):
        self._list.reverse()
    
    def copy(self):
        return MyList(self._list.copy())

    def __copy__(self):
        return self.copy()
    
    def __deepcopy__(self, memo):
        from copy import deepcopy
        return MyList(deepcopy(self._list, memo))